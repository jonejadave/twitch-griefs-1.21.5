plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Optional custom repos (e.g., for Twitch4J snapshots), if needed
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

// ðŸ”§ Include Twitch4J transitive dependencies
configurations {
	includeTransitive
}

dependencies {
	// Fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Twitch4J
	implementation 'com.github.twitch4j:twitch4j:1.24.0'
	includeTransitive 'com.github.twitch4j:twitch4j:1.24.0'
}

// ðŸ‘‡ Bundle transitive dependencies like OAuth2Credential into the final JAR
configurations.getByName("includeTransitive").resolvedConfiguration.resolvedArtifacts.forEach(dep -> {
	dependencies.add("include", dep.id.componentIdentifier.displayName)
})

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

// Maven publishing
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// Publishing target if needed
	}
}
